(racket-define -         racket--)
(racket-define /         racket-/)
(racket-define *         racket-*)
(racket-define cons      racket-mcons)
(racket-define inside    racket-get-output-string)
(racket-define instring  racket-open-input-string)
(racket-define nil       (racket-quote nil))
(racket-define outstring racket-open-output-string)
(racket-define t         (racket-quote t))
(racket-define uniq      racket-gensym)

(racket-define (ar-r/list-toarc x)
  (racket-cond
   ((racket-pair? x)
    (racket-mcons (racket-car x) (ar-r/list-toarc (racket-cdr x))))
   ((racket-null? x)
    (racket-quote nil))
   (racket-else x)))

(racket-define (list . args)
  (ar-r/list-toarc args))

(racket-define (ar-list-fromarc x)
  (racket-cond
   ((racket-mpair? x)
    (racket-cons (racket-mcar x) (ar-list-fromarc (racket-mcdr x))))
   ((racket-eq? x (racket-quote nil))
    (racket-quote ()))
   (racket-else x)))

(racket-define (ar-toarc x)
  (racket-cond
   ((racket-pair? x)
    (racket-mcons (ar-toarc (racket-car x))
                  (ar-toarc (racket-cdr x))))
   ((racket-null? x)
    nil)
   ((racket-string? x)
    (racket-string-copy x))
   (racket-else x)))

(racket-define (ar-strict-deep-fromarc x)
  (racket-cond ((racket-eq? x nil)
                (racket-quote ()))
               ((racket-mpair? x)
                (racket-cons (ar-strict-deep-fromarc (racket-mcar x))
                             (ar-strict-deep-fromarc (racket-mcdr x))))
               (racket-else
                x)))

(racket-define (ar-deep-fromarc x)
  (racket-cond
   ((racket-and (racket-mpair? x)
                (racket-eq? (racket-mcar x) (racket-quote racket-list)))
    (ar-strict-deep-fromarc (racket-mcar (racket-mcdr x))))

   ;; nil in the car position isn't a list terminator, and so can
   ;; be left alone.
   ((racket-mpair? x)
    (racket-cons (racket-let ((a (racket-mcar x)))
                   (racket-if (racket-eq? a nil)
                                nil
                                (ar-deep-fromarc a)))
                 (racket-let ((b (racket-mcdr x)))
                   (racket-if (racket-eq? b nil)
                               (racket-quote ())
                               (ar-deep-fromarc b)))))
   (racket-else
    x)))

(racket-define err racket-error)

(racket-define (car x)
  (racket-if (racket-eq? x (racket-quote nil))
              (racket-quote nil)
              (racket-mcar x)))

(racket-define (cdr x)
  (racket-if (racket-eq? x (racket-quote nil))
              (racket-quote nil)
              (racket-mcdr x)))

(racket-define (cadr x)
  (car (cdr x)))

(racket-define (cddr x)
  (cdr (cdr x)))

(racket-define (ar-exint x)
  (racket-and (racket-integer? x) (racket-exact? x)))

(racket-define (ar-tagged x)
  (racket-and (racket-vector? x)
              (racket-eq? (racket-vector-ref x 0) (racket-quote tagged))))

(racket-define (rep x)
  (racket-if (ar-tagged x)
              (racket-vector-ref x 2)
              x))

(racket-define (type x)
  (racket-cond
   ((ar-tagged x)             (racket-vector-ref x 1))
   ((racket-mpair? x)         (racket-quote cons))
   ((racket-symbol? x)        (racket-quote sym))
   ((racket-parameter? x)     (racket-quote parameter))
   ((racket-procedure? x)     (racket-quote fn))
   ((racket-char? x)          (racket-quote char))
   ((racket-string? x)        (racket-quote string))
   ((ar-exint x)              (racket-quote int))
   ((racket-number? x)        (racket-quote num))
   ((racket-hash? x)          (racket-quote table))
   ((racket-output-port? x)   (racket-quote output))
   ((racket-input-port? x)    (racket-quote input))
   ((racket-tcp-listener? x)  (racket-quote socket))
   ((racket-exn? x)           (racket-quote exception))
   ((racket-thread? x)        (racket-quote thread))
   ((racket-thread-cell? x)   (racket-quote thread-cell))
   ((racket-semaphore? x)     (racket-quote semaphore))
   (racket-else               (racket-quote unknown))))

(racket-define (annotate totype rep)
  (racket-cond
   ((racket-eqv? (type rep) totype) rep)
   (racket-else (racket-vector (racket-quote tagged) totype rep))))
